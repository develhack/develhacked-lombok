= Develhacked-Lombok
develhack.com
:doctype: book
:encoding: utf-8
:lang: en
:toc: left
:revision: 0.1.2
:sectanchors:
:toc:

== About

A library enhancing Java classes at compilation by annotations that contained in the link:https://github.com/develhack/develhack-core[Develhack Core Library]. It's powered by link:https://projectlombok.org/[The Project Lombok].

This library provides following features.

* xref:injects_argument_check[Injects argument check statements].
* xref:modifies_class[Modifies a structure of the class to match the features].
* xref:combination[Combination of the above].
* xref:configurable_items[A few configurable items].

== Description

[[injects_argument_check]]
=== Injects argument check statements

If an argument is annotated, injects argument check statements as the first statement of a method or constructor. +
Also, some annotations can combine with link:http://develhack.github.io/develhack-core/build/docs/javadoc/com/develhack/annotation/assertion/Nullable.html[`@Nullable`] for ignoring the check when the argument is `null`.

All statements generated by this feature are using the method prefixed by `check` that defined in the link:http://develhack.github.io/develhack-core/build/docs/javadoc/com/develhack/Conditions.html[`com.develhack.Conditions`]. +
Correspondence between annotations and used method are below.


[options="header", cols="2,2,3"]
|====================

| Annotation | Used method | Used method if combile with +@Nullable+

m| @Nonnull
m| checkNonnull
e| *CAN NOT COMBINE*

m| @Nonempty
m| checkNonempty
m| checkNonemptyIfNonnull

m| @Nonzero
m| checkNonzero
m| checkNonzeroIfNonnull

m| @Positive
m| checkPositive
m| checkPositiveIfNonnull

m| @Negative
m| checkNegative
m| checkNegativeIfNonnull

m| @ValidNumber
m| checkValidNumber
m| checkValidNumberIfNonnull

m| @FiniteNumber
m| checkFiniteNumber
m| checkFiniteNumberIfNonnull

m| @GreaterThan
m| checkGreaterThan
m| checkGreaterThanIfNonnull

m| @GreaterThanOrEqualTo
m| checkGreaterThanOrEqualTo
m| checkGreaterThanOrEqualToIfNonnull

m| @LessThan
m| checkLessThan
m| checkLessThanIfNonnull

m| @LessThanOrEqualTo
m| checkLessThanOrEqualTo
m| checkLessThanOrEqualToIfNonnull

m| @InRange
m| checkInRange
m| checkInRangeIfNonnull

|====================

Some annotations that having attributes of the comparison value, support the following types.

* All primitive types
* All wrapper of primitive types
* +java.math.BigInteger+
* +java.math.BigDecimal+
* +java.util.Date+
* Some types included +java.time+ package
* Some types included +org.threeten.bp+ package of link:http://www.threeten.org/threetenbp/[ThreeTen-Backport]

Also, it accepts the following formats according to the type.

Number literal::
A string representing a number literal. e.g. +"1"+, +"-1"+ and +"1.0F"+.

Date time literal for +java.util.Date+::
A string representing the date and time by such format as ISO 8601. +
However, delimiters can not be omitted, and time zone can not be specified. +
For example, +"2015-01-01"+ or +"2015-01-01T00:00:00"+.

Date time literal for +java.time.*+ and +org.threeten.bp.*+::
A string representing the date and time that parsable by the `parse` method defined on the type.

Variable reference::
A string representing the variable reference.


[[modifies_class]]
=== Modifies a structure of the class to match the features

If a class or a field is annotated, modifies a structure of the class to match the features.

Correspondence between annotations and contents of modification are below.


==== @DTO (Applicable to classes)

* Supplement `java.io.Serializable` to implemented interfaces.
* Supplement accessors for fields defined the class.

[CAUTION]
====
Accessors of the transient field are not supplied by the annotation for the class.
If necessary, please specify the xref:accessible[`@Accessible`] to the transient field individually.
====

[NOTE]
====
Visibility of all accessors will be the one specified by the attribute of the `@DTO`.
If you want to specify a separate visibility, please specify the the xref:accessible[`@Accessible`] to
individual fields for overridden the visibility.
====


==== @Equatable (Applicable to a class)

* Supplement an `equals` method.
* Supplement a `hashCode` method.

[CAUTION]
====
Transient fields are ignored from the `equals` method and `hashCode` method.
====


==== @Stringable (Applicable to classes)

* Supplement a `toString` method.


==== @InitializeFieldsByConstructor (Applicable to a class)

* Supplement constructors that takes arguments for initialize the fields.


==== @Serializable (Applicable to classes)

* Supplement `java.io.Serializable` to implemented interfaces.


==== @VO (Applicable to classes)

* Supplement `java.io.Serializable` to implemented interfaces.
* Supplement getters for fields defined the class.
* Supplement an `equals` method.
* Supplement a `hashCode` method.


==== @Utility  (Applicable to classes)

* Supplement `final` modifier to the class.
* Supplement an uncallable constructor.


[[accessible]]
==== @Accessible (Applicable to fields)

* Supplement accessors for the field.


==== @ExcludedFrom (Applicable to fields)

* Excludes the field from specified fietures.


[[combination]]
=== Combination of the above

If specify the annotation that supplements the accessor for the field, and specify the annotation
that represents assertion to the field together, the check argument statement is injected to the
accessor.

[NOTE]
====
The check argument statement is injected to only the methods that is supplemented by this library. +
The methods implemented by you are not injected the check argument statement.
====


[[configurable_items]]
=== A few configurable items

This library supports following configuration items that provided by the original Lombok.
See the link:https://projectlombok.org/features/configuration.html[document of Lombok] for information of those.

* +config.stopBubbling+
* +lombok.addGeneratedAnnotation+
* +lombok.extern.findbugs.addSuppressFBWarnings+
* +lombok.accessors.prefix+

Also, this library supports a few additional configuration items for Javadoc. +
All of the following entry's value will be formatted by the `java.text.MessageFormat`.

+com.develhack.lombok.feature.getterCommentTemplate+::
If this entry is specified, a description of Javadoc comment to the getters that supplemented by this library will be generated. +
The following parameters are specified at the time of format.
+
[options="header",cols="1,3"]
|====================

| Index            | Value

| 0                | A property name. e.g. a +"foo"+ if the spplemented getter signature is +getFoo()+.
| 1                | A description of the field that is specified as the Javadoc comment to the field.
| 2 and subsequent | Attributes of link:http://develhack.github.io/develhack-core/build/docs/javadoc/com/develhack/annotation/feature/Meta.html[`@Meta`] if it is specified to the field.

|====================


+com.develhack.lombok.feature.setterCommentTemplate+::
If this entry is specified, a description of Javadoc comment to the setters that supplemented by this library will be generated. +
The following parameters are specified at the time of format.
+
[options="header",cols="1,3"]
|====================

| Index            | Value

| 0                | A property name. e.g. a +"foo"+ if the spplemented setter signature is +setFoo(Object foo)+.
| 1                | A description of the field that is specified as the Javadoc comment to the field.
| 2 and subsequent | Attributes of link:http://develhack.github.io/develhack-core/build/docs/javadoc/com/develhack/annotation/feature/Meta.html[`@Meta`] if it is specified to the field.

|====================

+com.develhack.lombok.feature.constructorCommentTemplate+::
If this entry is specified, Javadoc comment to the constructor that supplemented by this library will be generated. +
The following parameters are specified at the time of format.
+
[options="header",cols="1,3"]
|====================

| Index            | Value

| 0                | The class name.
| 1                | A description of the class that is specified as the Javadoc comment to the class.
| 2 and subsequent | Attributes of link:http://develhack.github.io/develhack-core/build/docs/javadoc/com/develhack/annotation/feature/Meta.html[`@Meta`] if it is specified to the class.

|====================


=== More information

See the link:https://github.com/develhack/develhacked-lombok-example[develhacked-lombok-example] project for more information.


== Compatibility with the original Lombok

This library can coexist with the original Lombok, but can not be combine with the original Lombok.

For example, the argument check statement by the `com.develhack.annotation.assertion.Nonempty` is not injected to the method that will supplemented by the `lombok.Setter`.

[CAUTION]
====
`@Nonnull` and `@Nullable` will evaluated by some methods that supplemented by the original Lombok, because the original Lombok is detecting those annotations by the simple name.
====

== Requirement

* JDK 1.6 or higher

== Usage

Usage is basically the same as the original Lombok.
However, you should add the link:https://github.com/develhack/develhack-core[Develhack Core Library] to class-path.


=== Maven

[source,xml]
.pom.xml
----
<dependency>
    <groupId>com.develhack</groupId>
    <artifactId>develhack-core</artifactId>
    <version>[0.9,1.0)</version>
    <scope>compile</scope>
</dependency>
<dependency>
    <groupId>com.develhack</groupId>
    <artifactId>develhacked-lombok</artifactId>
    <version>0.1.2</version>
    <scope>provided</scope>
</dependency>
----

=== Gradle

[source.groovy]
.build.gradle
----
configurations {
    apt {
            visible false
    }
}

dependencies {
    compile 'com.develhack:develhack-core:0.9.+'
    apt 'com.develhack:develhacked-lombok:0.1.2'
}

sourceSets {
    main {
        java {
            compileClasspath += [ configurations.apt ]
        }
    }
    test {
        java {
            compileClasspath += [ configurations.apt ]
        }
    }
}
----

=== Eclipse IDE

Download the +develhacked-lombok-0.1.2.jar+ from the link:https://github.com/develhack/develhacked-lombok/releases[release page].
Then execute it and follow the instructions.


== License

http://mit-license.org/[MIT License]
